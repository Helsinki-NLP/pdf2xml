#!/usr/bin/env perl
#-*-perl-*-

=head1 NAME

pdf2xml - extract texts from PDF files and put them in XML

=head1 SYNOPSIS

 pdf2xml [OPTIONS] pdf-file > output.xml

=head1 OPTIONS

 -l lexicon ..... a list of words or a text in the target language
 -v ............. verbose output

=head1 DESCRIPTION

pdf2xml calls Apache Tika to extract text from PDf files and to convert them to XML (actually XHTML). It also uses pdf2text to find words that should not be split into character sequences (which often happens with pdf-text extractiont tools) and it also tries to put hyphenated words together again (again using different modes of pdftotext)

=head1 SEE ALSO

Apache Tika: L<http://tika.apache.org>

XPDF (which includes pdftotext): L<http://www.foolabs.com/xpdf/>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2013 by Joerg Tiedemann

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.

=cut

use strict;

use FindBin qw/$Bin/;
use IPC::Open2;
use XML::Parser;
use XML::Writer;

use vars qw($opt_l $opt_v);
use Getopt::Std;
getopts('l:v');

# home of shared data (where Apache Tika should be)

my $SHARED_HOME;
eval{ 
    require File::ShareDir; 
    $SHARED_HOME = File::ShareDir::dist_dir('PDF2XML'); 
};
unless (-d $SHARED_HOME){
    $SHARED_HOME = $Bin.'/share';
}

my $JAVA     = 'java';
my $TIKA     = $SHARED_HOME.'/lib/tika-app-1.3.jar';
my $PDF2TEXT = 'pdftotext';

my $pdf_file = shift(@ARGV);
my $xml_file = shift(@ARGV);

unless ($xml_file){
    $xml_file = $pdf_file;
    $xml_file=~s/\.pdf/\.xml/;
}


# the vocabulary
my %voc=();

if ($opt_l){
    &read_vocabulary(\%voc,$opt_l);
}



my $pid = open2(\*OUT, undef, 'pdftotext','-raw',$pdf_file,'-');
binmode(OUT,":encoding(UTF-8)");

my $hyphenated=undef;

while(<OUT>){
    chomp;
    my @tok=split(/\s+/);
    if ($hyphenated){
	$voc{$hyphenated.$tok[0]}++;
	print STDERR "possibly hyphenated: $hyphenated -- $tok[0]\n" if ($opt_v);
	$hyphenated=undef;
    }
    if (@tok){
	if ($tok[-1]=~/^(.*)-/){
	    $hyphenated=$1;
	}
    }
    foreach (@tok){
	$voc{$_}++;
    }
}
close(OUT);
waitpid( $pid, 0 );


my $pid = open2(\*OUT, undef, 'pdftotext',$pdf_file,'-');
binmode(OUT,":encoding(UTF-8)");
# waitpid( $pid, 0 );

while(<OUT>){
    chomp;
    my @words = find_words($_);
    foreach (@words){
	$voc{$_}++;
    }
}
close(OUT);
waitpid( $pid, 0 );


binmode(STDOUT,":encoding(UTF-8)");
my $writer = XML::Writer->new( OUTPUT => \*STDOUT, 
			       DATA_MODE => 1,
			       DATA_INDENT => 1 );


my $parser = new XML::Parser( Handlers => { 
    Default => sub{ print $_[1] },
    Char    => sub{ $_[0]->{STRING} .= $_[1] },
    Start   => \&xml_start,
    End     => \&xml_end } );


my $pid = open2(\*OUT, undef, 'java','-jar',$TIKA,'-x',$pdf_file);
$parser->parse(*OUT);



sub xml_start{ 
    shift;
    $writer->startTag(shift, @_);
}

sub xml_end{
    if ($_[0]->{STRING}){
	my @words = find_words( $_[0]->{STRING} );
	if (@words){
	    $writer->characters( join(' ',@words) );
	    $_[0]->{STRING} = '';
	}
    }
    $writer->endTag($_[1]);
}




sub find_words{
    my @words = ();

    if ($_[0]=~/LES CRITERES DE CHOIX/){
	print '';
    }

    my @tokens1 = split(/\s+/,$_[0]);
    my @tokens2 = ();

    my $remaining = \@tokens1;
    my $current   = \@tokens2;

    while (@{$remaining}){
	($current,$remaining) = ($remaining,$current);
	@{$remaining} = ();
	my $str = join('',@{$current});
	until (exists $voc{$str}){
	    last unless (@{$current});
	    unshift( @{$remaining}, pop(@{$current}) );
	    $str = join('',@{$current});
	}
	if ($#{$current}>0){
	    $voc{$str}++;
	    print STDERR join(' ',@{$current})," --> $str\n" if ($opt_v);
	}
	if ($str){ push(@words,$str); }
	else{      push(@words,shift @{$remaining}); }
    }
    return @words;
}

sub read_vocabulary{
    my ($voc,$file) = @_;
    if ($file=~/\.gz$/){
	open F,"gzip -cd < $file |" || die "cannot read from $file";
	binmode(F,":encoding(UTF-8)");
    }
    else{
	open F,"<:encoding(UTF-8)",$file || die "cannot read from $file";
    }
    while (<F>){
	chomp;
	my @words = split(/\s+/);
	foreach (@words){
	    $$voc{$_}++;
	}
    }
}

__END__
